/*
 * Copyright 2018 natanbc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'c'
}

apply from: 'toolchains.gradle'

model {
    //noinspection GroovyAssignabilityCheck
    components {
        detector(NativeLibrarySpec) {
            targets.each { if(isX86(it) || (isLinux(it) && isArm(it)) || isDarwin(it)) targetPlatform it }
            binaries.all {
                def srcs = []
                if(isX86(it.targetPlatform)) {
                    srcs << "detector_x86.c"
                }

                if(isDarwin(it.targetPlatform)) {
                    srcs << "detector_darwin.c"
                }
                if(isLinux(it.targetPlatform) && isArm(it.targetPlatform)) {
                    srcs << "detector_linux_arm.c"
                }
                if(isWindows(it.targetPlatform)) {
                    srcs << "detector_windows.c"
                }

                if(srcs.size() == 0) {
                    throw new Exception("Missing source define for target ${it.targetPlatform}")
                }
                sources {
                    c(CSourceSet) {
                        source {
                            srcDir "src/main/c"
                            srcs.each { include it }
                        }
                    }
                }
            }
        }
    }
    binaries {
        all {
            lib library: 'jni', linkage: 'api'

            if(toolChain in VisualCpp) {
                cppCompiler.args '/std:c11'
                cppCompiler.args "/Ox"
                cCompiler.args "/Ox"
            } else if(toolChain in Gcc || toolChain in Clang) {
                cppCompiler.args '-std=c11'
                cppCompiler.args "-O3"
                cCompiler.args "-O3"
            }

            if(isFreebsd(targetPlatform)) {
                lib library: 'freebsd_headers', linkage: 'api'
            }
        }
    }
}

tasks.withType(LinkSharedLibrary) {
    def filename = it.installName.get()
    def arch = targetDirectoryName(it.targetPlatform.get())
    if(arch.contains("darwin")) {
        filename = filename.replace(".so", ".dylib")
    }
    def newPath = new File(rootProject.projectDir, "src/main/resources/natives/" + arch + "/" + filename).getAbsoluteFile()
    newPath.getParentFile().mkdirs()
    it.linkedFile.set(newPath)
    taskForTarget(it.targetPlatform.get()).dependsOn it
}